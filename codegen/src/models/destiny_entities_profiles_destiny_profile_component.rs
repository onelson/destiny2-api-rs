/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesProfilesDestinyProfileComponent : The most essential summary information about a Profile (in Destiny 1, we called these \"Accounts\").

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesProfilesDestinyProfileComponent {
  /// If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.
  #[serde(rename = "userInfo")]
  user_info: Option<Object>,
  /// The last time the user played with any character on this Profile.
  #[serde(rename = "dateLastPlayed")]
  date_last_played: Option<String>,
  /// If you want to know what expansions they own, this will contain that data.
  #[serde(rename = "versionsOwned")]
  versions_owned: Option<Object>,
  /// A list of the character IDs, for further querying on your part.
  #[serde(rename = "characterIds")]
  character_ids: Option<Vec<i64>>
}

impl DestinyEntitiesProfilesDestinyProfileComponent {
  /// The most essential summary information about a Profile (in Destiny 1, we called these \"Accounts\").
  pub fn new() -> DestinyEntitiesProfilesDestinyProfileComponent {
    DestinyEntitiesProfilesDestinyProfileComponent {
      user_info: None,
      date_last_played: None,
      versions_owned: None,
      character_ids: None
    }
  }

  pub fn set_user_info(&mut self, user_info: Object) {
    self.user_info = Some(user_info);
  }

  pub fn with_user_info(mut self, user_info: Object) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.user_info = Some(user_info);
    self
  }

  pub fn user_info(&self) -> Option<&Object> {
    self.user_info.as_ref()
  }

  pub fn reset_user_info(&mut self) {
    self.user_info = None;
  }

  pub fn set_date_last_played(&mut self, date_last_played: String) {
    self.date_last_played = Some(date_last_played);
  }

  pub fn with_date_last_played(mut self, date_last_played: String) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.date_last_played = Some(date_last_played);
    self
  }

  pub fn date_last_played(&self) -> Option<&String> {
    self.date_last_played.as_ref()
  }

  pub fn reset_date_last_played(&mut self) {
    self.date_last_played = None;
  }

  pub fn set_versions_owned(&mut self, versions_owned: Object) {
    self.versions_owned = Some(versions_owned);
  }

  pub fn with_versions_owned(mut self, versions_owned: Object) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.versions_owned = Some(versions_owned);
    self
  }

  pub fn versions_owned(&self) -> Option<&Object> {
    self.versions_owned.as_ref()
  }

  pub fn reset_versions_owned(&mut self) {
    self.versions_owned = None;
  }

  pub fn set_character_ids(&mut self, character_ids: Vec<i64>) {
    self.character_ids = Some(character_ids);
  }

  pub fn with_character_ids(mut self, character_ids: Vec<i64>) -> DestinyEntitiesProfilesDestinyProfileComponent {
    self.character_ids = Some(character_ids);
    self
  }

  pub fn character_ids(&self) -> Option<&Vec<i64>> {
    self.character_ids.as_ref()
  }

  pub fn reset_character_ids(&mut self) {
    self.character_ids = None;
  }

}



