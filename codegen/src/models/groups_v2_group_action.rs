/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupAction {
  /// Type of group, either Bungie.net hosted group, or a game services hosted clan.
  #[serde(rename = "groupType")]
  group_type: Option<Object>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "about")]
  about: Option<String>,
  #[serde(rename = "motto")]
  motto: Option<String>,
  #[serde(rename = "theme")]
  theme: Option<String>,
  #[serde(rename = "avatarImageIndex")]
  avatar_image_index: Option<i32>,
  #[serde(rename = "tags")]
  tags: Option<String>,
  #[serde(rename = "isPublic")]
  is_public: Option<bool>,
  #[serde(rename = "membershipOption")]
  membership_option: Option<::models::GroupsV2MembershipOption>,
  #[serde(rename = "isPublicTopicAdminOnly")]
  is_public_topic_admin_only: Option<bool>,
  #[serde(rename = "isDefaultPostPublic")]
  is_default_post_public: Option<bool>,
  #[serde(rename = "allowChat")]
  allow_chat: Option<bool>,
  #[serde(rename = "isDefaultPostAlliance")]
  is_default_post_alliance: Option<bool>,
  #[serde(rename = "chatSecurity")]
  chat_security: Option<::models::GroupsV2ChatSecuritySetting>,
  #[serde(rename = "callsign")]
  callsign: Option<String>,
  #[serde(rename = "locale")]
  locale: Option<String>,
  #[serde(rename = "homepage")]
  homepage: Option<::models::GroupsV2GroupHomepage>,
  /// When operation needs a platform specific account ID for the present user, use this property. In particular, groupType of Clan requires this value to be set.
  #[serde(rename = "platformMembershipType")]
  platform_membership_type: Option<Object>
}

impl GroupsV2GroupAction {
  pub fn new() -> GroupsV2GroupAction {
    GroupsV2GroupAction {
      group_type: None,
      name: None,
      about: None,
      motto: None,
      theme: None,
      avatar_image_index: None,
      tags: None,
      is_public: None,
      membership_option: None,
      is_public_topic_admin_only: None,
      is_default_post_public: None,
      allow_chat: None,
      is_default_post_alliance: None,
      chat_security: None,
      callsign: None,
      locale: None,
      homepage: None,
      platform_membership_type: None
    }
  }

  pub fn set_group_type(&mut self, group_type: Object) {
    self.group_type = Some(group_type);
  }

  pub fn with_group_type(mut self, group_type: Object) -> GroupsV2GroupAction {
    self.group_type = Some(group_type);
    self
  }

  pub fn group_type(&self) -> Option<&Object> {
    self.group_type.as_ref()
  }

  pub fn reset_group_type(&mut self) {
    self.group_type = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GroupsV2GroupAction {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_about(&mut self, about: String) {
    self.about = Some(about);
  }

  pub fn with_about(mut self, about: String) -> GroupsV2GroupAction {
    self.about = Some(about);
    self
  }

  pub fn about(&self) -> Option<&String> {
    self.about.as_ref()
  }

  pub fn reset_about(&mut self) {
    self.about = None;
  }

  pub fn set_motto(&mut self, motto: String) {
    self.motto = Some(motto);
  }

  pub fn with_motto(mut self, motto: String) -> GroupsV2GroupAction {
    self.motto = Some(motto);
    self
  }

  pub fn motto(&self) -> Option<&String> {
    self.motto.as_ref()
  }

  pub fn reset_motto(&mut self) {
    self.motto = None;
  }

  pub fn set_theme(&mut self, theme: String) {
    self.theme = Some(theme);
  }

  pub fn with_theme(mut self, theme: String) -> GroupsV2GroupAction {
    self.theme = Some(theme);
    self
  }

  pub fn theme(&self) -> Option<&String> {
    self.theme.as_ref()
  }

  pub fn reset_theme(&mut self) {
    self.theme = None;
  }

  pub fn set_avatar_image_index(&mut self, avatar_image_index: i32) {
    self.avatar_image_index = Some(avatar_image_index);
  }

  pub fn with_avatar_image_index(mut self, avatar_image_index: i32) -> GroupsV2GroupAction {
    self.avatar_image_index = Some(avatar_image_index);
    self
  }

  pub fn avatar_image_index(&self) -> Option<&i32> {
    self.avatar_image_index.as_ref()
  }

  pub fn reset_avatar_image_index(&mut self) {
    self.avatar_image_index = None;
  }

  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> GroupsV2GroupAction {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_is_public(&mut self, is_public: bool) {
    self.is_public = Some(is_public);
  }

  pub fn with_is_public(mut self, is_public: bool) -> GroupsV2GroupAction {
    self.is_public = Some(is_public);
    self
  }

  pub fn is_public(&self) -> Option<&bool> {
    self.is_public.as_ref()
  }

  pub fn reset_is_public(&mut self) {
    self.is_public = None;
  }

  pub fn set_membership_option(&mut self, membership_option: ::models::GroupsV2MembershipOption) {
    self.membership_option = Some(membership_option);
  }

  pub fn with_membership_option(mut self, membership_option: ::models::GroupsV2MembershipOption) -> GroupsV2GroupAction {
    self.membership_option = Some(membership_option);
    self
  }

  pub fn membership_option(&self) -> Option<&::models::GroupsV2MembershipOption> {
    self.membership_option.as_ref()
  }

  pub fn reset_membership_option(&mut self) {
    self.membership_option = None;
  }

  pub fn set_is_public_topic_admin_only(&mut self, is_public_topic_admin_only: bool) {
    self.is_public_topic_admin_only = Some(is_public_topic_admin_only);
  }

  pub fn with_is_public_topic_admin_only(mut self, is_public_topic_admin_only: bool) -> GroupsV2GroupAction {
    self.is_public_topic_admin_only = Some(is_public_topic_admin_only);
    self
  }

  pub fn is_public_topic_admin_only(&self) -> Option<&bool> {
    self.is_public_topic_admin_only.as_ref()
  }

  pub fn reset_is_public_topic_admin_only(&mut self) {
    self.is_public_topic_admin_only = None;
  }

  pub fn set_is_default_post_public(&mut self, is_default_post_public: bool) {
    self.is_default_post_public = Some(is_default_post_public);
  }

  pub fn with_is_default_post_public(mut self, is_default_post_public: bool) -> GroupsV2GroupAction {
    self.is_default_post_public = Some(is_default_post_public);
    self
  }

  pub fn is_default_post_public(&self) -> Option<&bool> {
    self.is_default_post_public.as_ref()
  }

  pub fn reset_is_default_post_public(&mut self) {
    self.is_default_post_public = None;
  }

  pub fn set_allow_chat(&mut self, allow_chat: bool) {
    self.allow_chat = Some(allow_chat);
  }

  pub fn with_allow_chat(mut self, allow_chat: bool) -> GroupsV2GroupAction {
    self.allow_chat = Some(allow_chat);
    self
  }

  pub fn allow_chat(&self) -> Option<&bool> {
    self.allow_chat.as_ref()
  }

  pub fn reset_allow_chat(&mut self) {
    self.allow_chat = None;
  }

  pub fn set_is_default_post_alliance(&mut self, is_default_post_alliance: bool) {
    self.is_default_post_alliance = Some(is_default_post_alliance);
  }

  pub fn with_is_default_post_alliance(mut self, is_default_post_alliance: bool) -> GroupsV2GroupAction {
    self.is_default_post_alliance = Some(is_default_post_alliance);
    self
  }

  pub fn is_default_post_alliance(&self) -> Option<&bool> {
    self.is_default_post_alliance.as_ref()
  }

  pub fn reset_is_default_post_alliance(&mut self) {
    self.is_default_post_alliance = None;
  }

  pub fn set_chat_security(&mut self, chat_security: ::models::GroupsV2ChatSecuritySetting) {
    self.chat_security = Some(chat_security);
  }

  pub fn with_chat_security(mut self, chat_security: ::models::GroupsV2ChatSecuritySetting) -> GroupsV2GroupAction {
    self.chat_security = Some(chat_security);
    self
  }

  pub fn chat_security(&self) -> Option<&::models::GroupsV2ChatSecuritySetting> {
    self.chat_security.as_ref()
  }

  pub fn reset_chat_security(&mut self) {
    self.chat_security = None;
  }

  pub fn set_callsign(&mut self, callsign: String) {
    self.callsign = Some(callsign);
  }

  pub fn with_callsign(mut self, callsign: String) -> GroupsV2GroupAction {
    self.callsign = Some(callsign);
    self
  }

  pub fn callsign(&self) -> Option<&String> {
    self.callsign.as_ref()
  }

  pub fn reset_callsign(&mut self) {
    self.callsign = None;
  }

  pub fn set_locale(&mut self, locale: String) {
    self.locale = Some(locale);
  }

  pub fn with_locale(mut self, locale: String) -> GroupsV2GroupAction {
    self.locale = Some(locale);
    self
  }

  pub fn locale(&self) -> Option<&String> {
    self.locale.as_ref()
  }

  pub fn reset_locale(&mut self) {
    self.locale = None;
  }

  pub fn set_homepage(&mut self, homepage: ::models::GroupsV2GroupHomepage) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: ::models::GroupsV2GroupHomepage) -> GroupsV2GroupAction {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&::models::GroupsV2GroupHomepage> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_platform_membership_type(&mut self, platform_membership_type: Object) {
    self.platform_membership_type = Some(platform_membership_type);
  }

  pub fn with_platform_membership_type(mut self, platform_membership_type: Object) -> GroupsV2GroupAction {
    self.platform_membership_type = Some(platform_membership_type);
    self
  }

  pub fn platform_membership_type(&self) -> Option<&Object> {
    self.platform_membership_type.as_ref()
  }

  pub fn reset_platform_membership_type(&mut self) {
    self.platform_membership_type = None;
  }

}



