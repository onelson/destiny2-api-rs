/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct ForumApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ForumApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ForumApiClient<C> {
        ForumApiClient {
            configuration: configuration,
        }
    }
}

pub trait ForumApi {
    fn forum_approve_fireteam_thread(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error>>;
    fn forum_get_core_topics_paged(&self, category_filter: i32, page: i32, quick_date: i32, sort: i32, locales: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>>;
    fn forum_get_forum_tag_suggestions(&self, partialtag: &str) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error>>;
    fn forum_get_poll(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>>;
    fn forum_get_post_and_parent(&self, child_post_id: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>>;
    fn forum_get_post_and_parent_awaiting_approval(&self, child_post_id: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>>;
    fn forum_get_posts_threaded_paged(&self, get_parent_post: bool, page: i32, page_size: i32, parent_post_id: i32, reply_size: i32, root_thread_mode: bool, sort_mode: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>>;
    fn forum_get_posts_threaded_paged_from_child(&self, child_post_id: i32, page: i32, page_size: i32, reply_size: i32, root_thread_mode: bool, sort_mode: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>>;
    fn forum_get_recruitment_thread_summaries(&self, ) -> Box<Future<Item = ::models::InlineResponse20011, Error = Error>>;
    fn forum_get_topic_for_content(&self, content_id: i64) -> Box<Future<Item = ::models::InlineResponse2007, Error = Error>>;
    fn forum_get_topics_paged(&self, category_filter: i32, group: i64, page: i32, page_size: i32, quick_date: i32, sort: i32, locales: &str, tagstring: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>>;
    fn forum_join_fireteam_thread(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error>>;
    fn forum_kick_ban_fireteam_applicant(&self, target_membership_id: i64, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error>>;
    fn forum_leave_fireteam_thread(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error>>;
}


impl<C: hyper::client::Connect>ForumApi for ForumApiClient<C> {
    fn forum_approve_fireteam_thread(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/Forum/Recruit/Approve/{topicId}/", configuration.base_path, topicId=topic_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20010, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_core_topics_paged(&self, category_filter: i32, page: i32, quick_date: i32, sort: i32, locales: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("locales", &locales.to_string())
            .finish();
        let uri_str = format!("{}/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/{}", configuration.base_path, query, categoryFilter=category_filter, page=page, quickDate=quick_date, sort=sort);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2006, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_forum_tag_suggestions(&self, partialtag: &str) -> Box<Future<Item = ::models::InlineResponse2008, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("partialtag", &partialtag.to_string())
            .finish();
        let uri_str = format!("{}/Forum/GetForumTagSuggestions/{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2008, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_poll(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/Forum/Poll/{topicId}/", configuration.base_path, topicId=topic_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2006, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_post_and_parent(&self, child_post_id: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("showbanned", &showbanned.to_string())
            .finish();
        let uri_str = format!("{}/Forum/GetPostAndParent/{childPostId}/{}", configuration.base_path, query, childPostId=child_post_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2006, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_post_and_parent_awaiting_approval(&self, child_post_id: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("showbanned", &showbanned.to_string())
            .finish();
        let uri_str = format!("{}/Forum/GetPostAndParentAwaitingApproval/{childPostId}/{}", configuration.base_path, query, childPostId=child_post_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2006, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_posts_threaded_paged(&self, get_parent_post: bool, page: i32, page_size: i32, parent_post_id: i32, reply_size: i32, root_thread_mode: bool, sort_mode: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("showbanned", &showbanned.to_string())
            .finish();
        let uri_str = format!("{}/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/{}", configuration.base_path, query, getParentPost=get_parent_post, page=page, pageSize=page_size, parentPostId=parent_post_id, replySize=reply_size, rootThreadMode=root_thread_mode, sortMode=sort_mode);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2006, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_posts_threaded_paged_from_child(&self, child_post_id: i32, page: i32, page_size: i32, reply_size: i32, root_thread_mode: bool, sort_mode: i32, showbanned: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("showbanned", &showbanned.to_string())
            .finish();
        let uri_str = format!("{}/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/{}", configuration.base_path, query, childPostId=child_post_id, page=page, pageSize=page_size, replySize=reply_size, rootThreadMode=root_thread_mode, sortMode=sort_mode);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2006, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_recruitment_thread_summaries(&self, ) -> Box<Future<Item = ::models::InlineResponse20011, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/Forum/Recruit/Summaries/", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20011, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_topic_for_content(&self, content_id: i64) -> Box<Future<Item = ::models::InlineResponse2007, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/Forum/GetTopicForContent/{contentId}/", configuration.base_path, contentId=content_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2007, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_get_topics_paged(&self, category_filter: i32, group: i64, page: i32, page_size: i32, quick_date: i32, sort: i32, locales: &str, tagstring: &str) -> Box<Future<Item = ::models::InlineResponse2006, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("locales", &locales.to_string())
            .append_pair("tagstring", &tagstring.to_string())
            .finish();
        let uri_str = format!("{}/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/{}", configuration.base_path, query, categoryFilter=category_filter, group=group, page=page, pageSize=page_size, quickDate=quick_date, sort=sort);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2006, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_join_fireteam_thread(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/Forum/Recruit/Join/{topicId}/", configuration.base_path, topicId=topic_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2009, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_kick_ban_fireteam_applicant(&self, target_membership_id: i64, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/Forum/Recruit/KickBan/{topicId}/{targetMembershipId}/", configuration.base_path, targetMembershipId=target_membership_id, topicId=topic_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2009, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn forum_leave_fireteam_thread(&self, topic_id: i64) -> Box<Future<Item = ::models::InlineResponse2009, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let uri_str = format!("{}/Forum/Recruit/Leave/{topicId}/", configuration.base_path, topicId=topic_id);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse2009, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

}
