/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyProfileResponse : The response for GetDestinyProfile, with components for character and item-level data.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyProfileResponse {
  /// Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...  COMPONENT TYPE: VendorReceipts
  #[serde(rename = "vendorReceipts")]
  vendor_receipts: Option<Object>,
  /// The profile-level inventory of the Destiny Profile.  COMPONENT TYPE: ProfileInventories
  #[serde(rename = "profileInventory")]
  profile_inventory: Option<Object>,
  /// The profile-level currencies owned by the Destiny Profile.  COMPONENT TYPE: ProfileCurrencies
  #[serde(rename = "profileCurrencies")]
  profile_currencies: Option<Object>,
  /// The basic information about the Destiny Profile (formerly \"Account\").  COMPONENT TYPE: Profiles
  #[serde(rename = "profile")]
  profile: Option<Object>,
  /// Items available from Kiosks that are available Profile-wide (i.e. across all characters)  This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.  COMPONENT TYPE: Kiosks
  #[serde(rename = "profileKiosks")]
  profile_kiosks: Option<Object>,
  /// Basic information about each character, keyed by the CharacterId.  COMPONENT TYPE: Characters
  #[serde(rename = "characters")]
  characters: Option<Object>,
  /// The character-level non-equipped inventory items, keyed by the Character's Id.  COMPONENT TYPE: CharacterInventories
  #[serde(rename = "characterInventories")]
  character_inventories: Option<Object>,
  /// Character-level progression data, keyed by the Character's Id.  COMPONENT TYPE: CharacterProgressions
  #[serde(rename = "characterProgressions")]
  character_progressions: Option<Object>,
  /// Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.  COMPONENT TYPE: CharacterRenderData
  #[serde(rename = "characterRenderData")]
  character_render_data: Option<Object>,
  /// Character activity data - the activities available to this character and its status, keyed by the Character's Id.  COMPONENT TYPE: CharacterActivities
  #[serde(rename = "characterActivities")]
  character_activities: Option<Object>,
  /// The character's equipped items, keyed by the Character's Id.  COMPONENT TYPE: CharacterEquipment
  #[serde(rename = "characterEquipment")]
  character_equipment: Option<Object>,
  /// Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.  This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.  COMPONENT TYPE: Kiosks
  #[serde(rename = "characterKiosks")]
  character_kiosks: Option<Object>,
  /// Information about instanced items across all returned characters, keyed by the item's instance ID.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
  #[serde(rename = "itemComponents")]
  item_components: Option<Object>
}

impl DestinyResponsesDestinyProfileResponse {
  /// The response for GetDestinyProfile, with components for character and item-level data.
  pub fn new() -> DestinyResponsesDestinyProfileResponse {
    DestinyResponsesDestinyProfileResponse {
      vendor_receipts: None,
      profile_inventory: None,
      profile_currencies: None,
      profile: None,
      profile_kiosks: None,
      characters: None,
      character_inventories: None,
      character_progressions: None,
      character_render_data: None,
      character_activities: None,
      character_equipment: None,
      character_kiosks: None,
      item_components: None
    }
  }

  pub fn set_vendor_receipts(&mut self, vendor_receipts: Object) {
    self.vendor_receipts = Some(vendor_receipts);
  }

  pub fn with_vendor_receipts(mut self, vendor_receipts: Object) -> DestinyResponsesDestinyProfileResponse {
    self.vendor_receipts = Some(vendor_receipts);
    self
  }

  pub fn vendor_receipts(&self) -> Option<&Object> {
    self.vendor_receipts.as_ref()
  }

  pub fn reset_vendor_receipts(&mut self) {
    self.vendor_receipts = None;
  }

  pub fn set_profile_inventory(&mut self, profile_inventory: Object) {
    self.profile_inventory = Some(profile_inventory);
  }

  pub fn with_profile_inventory(mut self, profile_inventory: Object) -> DestinyResponsesDestinyProfileResponse {
    self.profile_inventory = Some(profile_inventory);
    self
  }

  pub fn profile_inventory(&self) -> Option<&Object> {
    self.profile_inventory.as_ref()
  }

  pub fn reset_profile_inventory(&mut self) {
    self.profile_inventory = None;
  }

  pub fn set_profile_currencies(&mut self, profile_currencies: Object) {
    self.profile_currencies = Some(profile_currencies);
  }

  pub fn with_profile_currencies(mut self, profile_currencies: Object) -> DestinyResponsesDestinyProfileResponse {
    self.profile_currencies = Some(profile_currencies);
    self
  }

  pub fn profile_currencies(&self) -> Option<&Object> {
    self.profile_currencies.as_ref()
  }

  pub fn reset_profile_currencies(&mut self) {
    self.profile_currencies = None;
  }

  pub fn set_profile(&mut self, profile: Object) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: Object) -> DestinyResponsesDestinyProfileResponse {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&Object> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

  pub fn set_profile_kiosks(&mut self, profile_kiosks: Object) {
    self.profile_kiosks = Some(profile_kiosks);
  }

  pub fn with_profile_kiosks(mut self, profile_kiosks: Object) -> DestinyResponsesDestinyProfileResponse {
    self.profile_kiosks = Some(profile_kiosks);
    self
  }

  pub fn profile_kiosks(&self) -> Option<&Object> {
    self.profile_kiosks.as_ref()
  }

  pub fn reset_profile_kiosks(&mut self) {
    self.profile_kiosks = None;
  }

  pub fn set_characters(&mut self, characters: Object) {
    self.characters = Some(characters);
  }

  pub fn with_characters(mut self, characters: Object) -> DestinyResponsesDestinyProfileResponse {
    self.characters = Some(characters);
    self
  }

  pub fn characters(&self) -> Option<&Object> {
    self.characters.as_ref()
  }

  pub fn reset_characters(&mut self) {
    self.characters = None;
  }

  pub fn set_character_inventories(&mut self, character_inventories: Object) {
    self.character_inventories = Some(character_inventories);
  }

  pub fn with_character_inventories(mut self, character_inventories: Object) -> DestinyResponsesDestinyProfileResponse {
    self.character_inventories = Some(character_inventories);
    self
  }

  pub fn character_inventories(&self) -> Option<&Object> {
    self.character_inventories.as_ref()
  }

  pub fn reset_character_inventories(&mut self) {
    self.character_inventories = None;
  }

  pub fn set_character_progressions(&mut self, character_progressions: Object) {
    self.character_progressions = Some(character_progressions);
  }

  pub fn with_character_progressions(mut self, character_progressions: Object) -> DestinyResponsesDestinyProfileResponse {
    self.character_progressions = Some(character_progressions);
    self
  }

  pub fn character_progressions(&self) -> Option<&Object> {
    self.character_progressions.as_ref()
  }

  pub fn reset_character_progressions(&mut self) {
    self.character_progressions = None;
  }

  pub fn set_character_render_data(&mut self, character_render_data: Object) {
    self.character_render_data = Some(character_render_data);
  }

  pub fn with_character_render_data(mut self, character_render_data: Object) -> DestinyResponsesDestinyProfileResponse {
    self.character_render_data = Some(character_render_data);
    self
  }

  pub fn character_render_data(&self) -> Option<&Object> {
    self.character_render_data.as_ref()
  }

  pub fn reset_character_render_data(&mut self) {
    self.character_render_data = None;
  }

  pub fn set_character_activities(&mut self, character_activities: Object) {
    self.character_activities = Some(character_activities);
  }

  pub fn with_character_activities(mut self, character_activities: Object) -> DestinyResponsesDestinyProfileResponse {
    self.character_activities = Some(character_activities);
    self
  }

  pub fn character_activities(&self) -> Option<&Object> {
    self.character_activities.as_ref()
  }

  pub fn reset_character_activities(&mut self) {
    self.character_activities = None;
  }

  pub fn set_character_equipment(&mut self, character_equipment: Object) {
    self.character_equipment = Some(character_equipment);
  }

  pub fn with_character_equipment(mut self, character_equipment: Object) -> DestinyResponsesDestinyProfileResponse {
    self.character_equipment = Some(character_equipment);
    self
  }

  pub fn character_equipment(&self) -> Option<&Object> {
    self.character_equipment.as_ref()
  }

  pub fn reset_character_equipment(&mut self) {
    self.character_equipment = None;
  }

  pub fn set_character_kiosks(&mut self, character_kiosks: Object) {
    self.character_kiosks = Some(character_kiosks);
  }

  pub fn with_character_kiosks(mut self, character_kiosks: Object) -> DestinyResponsesDestinyProfileResponse {
    self.character_kiosks = Some(character_kiosks);
    self
  }

  pub fn character_kiosks(&self) -> Option<&Object> {
    self.character_kiosks.as_ref()
  }

  pub fn reset_character_kiosks(&mut self) {
    self.character_kiosks = None;
  }

  pub fn set_item_components(&mut self, item_components: Object) {
    self.item_components = Some(item_components);
  }

  pub fn with_item_components(mut self, item_components: Object) -> DestinyResponsesDestinyProfileResponse {
    self.item_components = Some(item_components);
    self
  }

  pub fn item_components(&self) -> Option<&Object> {
    self.item_components.as_ref()
  }

  pub fn reset_item_components(&mut self) {
    self.item_components = None;
  }

}



