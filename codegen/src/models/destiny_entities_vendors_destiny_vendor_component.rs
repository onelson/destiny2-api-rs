/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesVendorsDestinyVendorComponent : This component contains essential/summary information about the vendor.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesVendorsDestinyVendorComponent {
  /// The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
  #[serde(rename = "vendorHash")]
  vendor_hash: Option<i32>,
  /// Long ago, we thought it would be a good idea to have special UI that showed whether or not you've seen a Vendor's inventory after cycling.   For now, we don't have that UI anymore. This property still exists for historical purposes. Don't worry about it.
  #[serde(rename = "ackState")]
  ack_state: Option<Object>,
  /// The date when this vendor's inventory will next rotate/refresh.
  #[serde(rename = "nextRefreshDate")]
  next_refresh_date: Option<String>,
  /// If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// If True, you can purchase from the Vendor.  Theoretically, Vendors can be restricted from selling items. In practice, none do that (yet?).
  #[serde(rename = "canPurchase")]
  can_purchase: Option<bool>,
  /// If the Vendor has a related Reputation, this is the Progression data that represents the character's Reputation level with this Vendor.
  #[serde(rename = "progression")]
  progression: Option<Object>
}

impl DestinyEntitiesVendorsDestinyVendorComponent {
  /// This component contains essential/summary information about the vendor.
  pub fn new() -> DestinyEntitiesVendorsDestinyVendorComponent {
    DestinyEntitiesVendorsDestinyVendorComponent {
      vendor_hash: None,
      ack_state: None,
      next_refresh_date: None,
      enabled: None,
      can_purchase: None,
      progression: None
    }
  }

  pub fn set_vendor_hash(&mut self, vendor_hash: i32) {
    self.vendor_hash = Some(vendor_hash);
  }

  pub fn with_vendor_hash(mut self, vendor_hash: i32) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.vendor_hash = Some(vendor_hash);
    self
  }

  pub fn vendor_hash(&self) -> Option<&i32> {
    self.vendor_hash.as_ref()
  }

  pub fn reset_vendor_hash(&mut self) {
    self.vendor_hash = None;
  }

  pub fn set_ack_state(&mut self, ack_state: Object) {
    self.ack_state = Some(ack_state);
  }

  pub fn with_ack_state(mut self, ack_state: Object) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.ack_state = Some(ack_state);
    self
  }

  pub fn ack_state(&self) -> Option<&Object> {
    self.ack_state.as_ref()
  }

  pub fn reset_ack_state(&mut self) {
    self.ack_state = None;
  }

  pub fn set_next_refresh_date(&mut self, next_refresh_date: String) {
    self.next_refresh_date = Some(next_refresh_date);
  }

  pub fn with_next_refresh_date(mut self, next_refresh_date: String) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.next_refresh_date = Some(next_refresh_date);
    self
  }

  pub fn next_refresh_date(&self) -> Option<&String> {
    self.next_refresh_date.as_ref()
  }

  pub fn reset_next_refresh_date(&mut self) {
    self.next_refresh_date = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_can_purchase(&mut self, can_purchase: bool) {
    self.can_purchase = Some(can_purchase);
  }

  pub fn with_can_purchase(mut self, can_purchase: bool) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.can_purchase = Some(can_purchase);
    self
  }

  pub fn can_purchase(&self) -> Option<&bool> {
    self.can_purchase.as_ref()
  }

  pub fn reset_can_purchase(&mut self) {
    self.can_purchase = None;
  }

  pub fn set_progression(&mut self, progression: Object) {
    self.progression = Some(progression);
  }

  pub fn with_progression(mut self, progression: Object) -> DestinyEntitiesVendorsDestinyVendorComponent {
    self.progression = Some(progression);
    self
  }

  pub fn progression(&self) -> Option<&Object> {
    self.progression.as_ref()
  }

  pub fn reset_progression(&mut self) {
    self.progression = None;
  }

}



