/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemSetBlockDefinition : Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemSetBlockDefinition {
  /// A collection of hashes of set items, for items such as Quest Metadata items that possess this data.
  #[serde(rename = "itemList")]
  item_list: Option<Vec<::models::DestinyDefinitionsDestinyItemSetBlockEntryDefinition>>,
  /// If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.
  #[serde(rename = "requireOrderedSetItemAdd")]
  require_ordered_set_item_add: Option<bool>,
  /// If true, the UI should treat this quest as \"featured\"
  #[serde(rename = "setIsFeatured")]
  set_is_featured: Option<bool>,
  /// A string identifier we can use to attempt to identify the category of the Quest.
  #[serde(rename = "setType")]
  set_type: Option<String>
}

impl DestinyDefinitionsDestinyItemSetBlockDefinition {
  /// Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps.
  pub fn new() -> DestinyDefinitionsDestinyItemSetBlockDefinition {
    DestinyDefinitionsDestinyItemSetBlockDefinition {
      item_list: None,
      require_ordered_set_item_add: None,
      set_is_featured: None,
      set_type: None
    }
  }

  pub fn set_item_list(&mut self, item_list: Vec<::models::DestinyDefinitionsDestinyItemSetBlockEntryDefinition>) {
    self.item_list = Some(item_list);
  }

  pub fn with_item_list(mut self, item_list: Vec<::models::DestinyDefinitionsDestinyItemSetBlockEntryDefinition>) -> DestinyDefinitionsDestinyItemSetBlockDefinition {
    self.item_list = Some(item_list);
    self
  }

  pub fn item_list(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyItemSetBlockEntryDefinition>> {
    self.item_list.as_ref()
  }

  pub fn reset_item_list(&mut self) {
    self.item_list = None;
  }

  pub fn set_require_ordered_set_item_add(&mut self, require_ordered_set_item_add: bool) {
    self.require_ordered_set_item_add = Some(require_ordered_set_item_add);
  }

  pub fn with_require_ordered_set_item_add(mut self, require_ordered_set_item_add: bool) -> DestinyDefinitionsDestinyItemSetBlockDefinition {
    self.require_ordered_set_item_add = Some(require_ordered_set_item_add);
    self
  }

  pub fn require_ordered_set_item_add(&self) -> Option<&bool> {
    self.require_ordered_set_item_add.as_ref()
  }

  pub fn reset_require_ordered_set_item_add(&mut self) {
    self.require_ordered_set_item_add = None;
  }

  pub fn set_set_is_featured(&mut self, set_is_featured: bool) {
    self.set_is_featured = Some(set_is_featured);
  }

  pub fn with_set_is_featured(mut self, set_is_featured: bool) -> DestinyDefinitionsDestinyItemSetBlockDefinition {
    self.set_is_featured = Some(set_is_featured);
    self
  }

  pub fn set_is_featured(&self) -> Option<&bool> {
    self.set_is_featured.as_ref()
  }

  pub fn reset_set_is_featured(&mut self) {
    self.set_is_featured = None;
  }

  pub fn set_set_type(&mut self, set_type: String) {
    self.set_type = Some(set_type);
  }

  pub fn with_set_type(mut self, set_type: String) -> DestinyDefinitionsDestinyItemSetBlockDefinition {
    self.set_type = Some(set_type);
    self
  }

  pub fn set_type(&self) -> Option<&String> {
    self.set_type.as_ref()
  }

  pub fn reset_set_type(&mut self) {
    self.set_type = None;
  }

}



