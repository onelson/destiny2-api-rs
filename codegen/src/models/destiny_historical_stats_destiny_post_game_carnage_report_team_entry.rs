/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
  /// Integer ID for the team.
  #[serde(rename = "teamId")]
  team_id: Option<i32>,
  /// Team's standing relative to other teams.
  #[serde(rename = "standing")]
  standing: Option<Object>,
  /// Score earned by the team
  #[serde(rename = "score")]
  score: Option<Object>,
  /// Alpha or Bravo
  #[serde(rename = "teamName")]
  team_name: Option<String>
}

impl DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
  pub fn new() -> DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
    DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
      team_id: None,
      standing: None,
      score: None,
      team_name: None
    }
  }

  pub fn set_team_id(&mut self, team_id: i32) {
    self.team_id = Some(team_id);
  }

  pub fn with_team_id(mut self, team_id: i32) -> DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
    self.team_id = Some(team_id);
    self
  }

  pub fn team_id(&self) -> Option<&i32> {
    self.team_id.as_ref()
  }

  pub fn reset_team_id(&mut self) {
    self.team_id = None;
  }

  pub fn set_standing(&mut self, standing: Object) {
    self.standing = Some(standing);
  }

  pub fn with_standing(mut self, standing: Object) -> DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
    self.standing = Some(standing);
    self
  }

  pub fn standing(&self) -> Option<&Object> {
    self.standing.as_ref()
  }

  pub fn reset_standing(&mut self) {
    self.standing = None;
  }

  pub fn set_score(&mut self, score: Object) {
    self.score = Some(score);
  }

  pub fn with_score(mut self, score: Object) -> DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
    self.score = Some(score);
    self
  }

  pub fn score(&self) -> Option<&Object> {
    self.score.as_ref()
  }

  pub fn reset_score(&mut self) {
    self.score = None;
  }

  pub fn set_team_name(&mut self, team_name: String) {
    self.team_name = Some(team_name);
  }

  pub fn with_team_name(mut self, team_name: String) -> DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry {
    self.team_name = Some(team_name);
    self
  }

  pub fn team_name(&self) -> Option<&String> {
    self.team_name.as_ref()
  }

  pub fn reset_team_name(&mut self) {
    self.team_name = None;
  }

}



