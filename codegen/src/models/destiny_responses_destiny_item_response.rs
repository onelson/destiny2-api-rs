/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyItemResponse : The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an \"itemInstanceId\": for those, get your information from the DestinyInventoryDefinition.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyItemResponse {
  /// If the item is on a character, this will return the ID of the character that is holding the item.
  #[serde(rename = "characterId")]
  character_id: Option<i64>,
  /// Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData
  #[serde(rename = "item")]
  item: Option<Object>,
  /// Basic instance data for the item.  COMPONENT TYPE: ItemInstances
  #[serde(rename = "instance")]
  instance: Option<Object>,
  /// Information specifically about the item's objectives.  COMPONENT TYPE: ItemObjectives
  #[serde(rename = "objectives")]
  objectives: Option<Object>,
  /// Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks
  #[serde(rename = "perks")]
  perks: Option<Object>,
  /// Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData
  #[serde(rename = "renderData")]
  render_data: Option<Object>,
  /// Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats
  #[serde(rename = "stats")]
  stats: Option<Object>,
  /// Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's \"Builds\".  COMPONENT TYPE: ItemTalentGrids
  #[serde(rename = "talentGrid")]
  talent_grid: Option<Object>,
  /// Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets
  #[serde(rename = "sockets")]
  sockets: Option<Object>
}

impl DestinyResponsesDestinyItemResponse {
  /// The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an \"itemInstanceId\": for those, get your information from the DestinyInventoryDefinition.
  pub fn new() -> DestinyResponsesDestinyItemResponse {
    DestinyResponsesDestinyItemResponse {
      character_id: None,
      item: None,
      instance: None,
      objectives: None,
      perks: None,
      render_data: None,
      stats: None,
      talent_grid: None,
      sockets: None
    }
  }

  pub fn set_character_id(&mut self, character_id: i64) {
    self.character_id = Some(character_id);
  }

  pub fn with_character_id(mut self, character_id: i64) -> DestinyResponsesDestinyItemResponse {
    self.character_id = Some(character_id);
    self
  }

  pub fn character_id(&self) -> Option<&i64> {
    self.character_id.as_ref()
  }

  pub fn reset_character_id(&mut self) {
    self.character_id = None;
  }

  pub fn set_item(&mut self, item: Object) {
    self.item = Some(item);
  }

  pub fn with_item(mut self, item: Object) -> DestinyResponsesDestinyItemResponse {
    self.item = Some(item);
    self
  }

  pub fn item(&self) -> Option<&Object> {
    self.item.as_ref()
  }

  pub fn reset_item(&mut self) {
    self.item = None;
  }

  pub fn set_instance(&mut self, instance: Object) {
    self.instance = Some(instance);
  }

  pub fn with_instance(mut self, instance: Object) -> DestinyResponsesDestinyItemResponse {
    self.instance = Some(instance);
    self
  }

  pub fn instance(&self) -> Option<&Object> {
    self.instance.as_ref()
  }

  pub fn reset_instance(&mut self) {
    self.instance = None;
  }

  pub fn set_objectives(&mut self, objectives: Object) {
    self.objectives = Some(objectives);
  }

  pub fn with_objectives(mut self, objectives: Object) -> DestinyResponsesDestinyItemResponse {
    self.objectives = Some(objectives);
    self
  }

  pub fn objectives(&self) -> Option<&Object> {
    self.objectives.as_ref()
  }

  pub fn reset_objectives(&mut self) {
    self.objectives = None;
  }

  pub fn set_perks(&mut self, perks: Object) {
    self.perks = Some(perks);
  }

  pub fn with_perks(mut self, perks: Object) -> DestinyResponsesDestinyItemResponse {
    self.perks = Some(perks);
    self
  }

  pub fn perks(&self) -> Option<&Object> {
    self.perks.as_ref()
  }

  pub fn reset_perks(&mut self) {
    self.perks = None;
  }

  pub fn set_render_data(&mut self, render_data: Object) {
    self.render_data = Some(render_data);
  }

  pub fn with_render_data(mut self, render_data: Object) -> DestinyResponsesDestinyItemResponse {
    self.render_data = Some(render_data);
    self
  }

  pub fn render_data(&self) -> Option<&Object> {
    self.render_data.as_ref()
  }

  pub fn reset_render_data(&mut self) {
    self.render_data = None;
  }

  pub fn set_stats(&mut self, stats: Object) {
    self.stats = Some(stats);
  }

  pub fn with_stats(mut self, stats: Object) -> DestinyResponsesDestinyItemResponse {
    self.stats = Some(stats);
    self
  }

  pub fn stats(&self) -> Option<&Object> {
    self.stats.as_ref()
  }

  pub fn reset_stats(&mut self) {
    self.stats = None;
  }

  pub fn set_talent_grid(&mut self, talent_grid: Object) {
    self.talent_grid = Some(talent_grid);
  }

  pub fn with_talent_grid(mut self, talent_grid: Object) -> DestinyResponsesDestinyItemResponse {
    self.talent_grid = Some(talent_grid);
    self
  }

  pub fn talent_grid(&self) -> Option<&Object> {
    self.talent_grid.as_ref()
  }

  pub fn reset_talent_grid(&mut self) {
    self.talent_grid = None;
  }

  pub fn set_sockets(&mut self, sockets: Object) {
    self.sockets = Some(sockets);
  }

  pub fn with_sockets(mut self, sockets: Object) -> DestinyResponsesDestinyItemResponse {
    self.sockets = Some(sockets);
    self
  }

  pub fn sockets(&self) -> Option<&Object> {
    self.sockets.as_ref()
  }

  pub fn reset_sockets(&mut self) {
    self.sockets = None;
  }

}



