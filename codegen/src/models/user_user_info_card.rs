/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UserUserInfoCard : This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.

#[derive(Debug, Serialize, Deserialize)]
pub struct UserUserInfoCard {
  /// A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
  #[serde(rename = "supplementalDisplayName")]
  supplemental_display_name: Option<String>,
  /// URL the Icon if available.
  #[serde(rename = "iconPath")]
  icon_path: Option<String>,
  /// Type of the membership.
  #[serde(rename = "membershipType")]
  membership_type: Option<Object>,
  /// Membership ID as they user is known in the Accounts service
  #[serde(rename = "membershipId")]
  membership_id: Option<i64>,
  /// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
  #[serde(rename = "displayName")]
  display_name: Option<String>
}

impl UserUserInfoCard {
  /// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
  pub fn new() -> UserUserInfoCard {
    UserUserInfoCard {
      supplemental_display_name: None,
      icon_path: None,
      membership_type: None,
      membership_id: None,
      display_name: None
    }
  }

  pub fn set_supplemental_display_name(&mut self, supplemental_display_name: String) {
    self.supplemental_display_name = Some(supplemental_display_name);
  }

  pub fn with_supplemental_display_name(mut self, supplemental_display_name: String) -> UserUserInfoCard {
    self.supplemental_display_name = Some(supplemental_display_name);
    self
  }

  pub fn supplemental_display_name(&self) -> Option<&String> {
    self.supplemental_display_name.as_ref()
  }

  pub fn reset_supplemental_display_name(&mut self) {
    self.supplemental_display_name = None;
  }

  pub fn set_icon_path(&mut self, icon_path: String) {
    self.icon_path = Some(icon_path);
  }

  pub fn with_icon_path(mut self, icon_path: String) -> UserUserInfoCard {
    self.icon_path = Some(icon_path);
    self
  }

  pub fn icon_path(&self) -> Option<&String> {
    self.icon_path.as_ref()
  }

  pub fn reset_icon_path(&mut self) {
    self.icon_path = None;
  }

  pub fn set_membership_type(&mut self, membership_type: Object) {
    self.membership_type = Some(membership_type);
  }

  pub fn with_membership_type(mut self, membership_type: Object) -> UserUserInfoCard {
    self.membership_type = Some(membership_type);
    self
  }

  pub fn membership_type(&self) -> Option<&Object> {
    self.membership_type.as_ref()
  }

  pub fn reset_membership_type(&mut self) {
    self.membership_type = None;
  }

  pub fn set_membership_id(&mut self, membership_id: i64) {
    self.membership_id = Some(membership_id);
  }

  pub fn with_membership_id(mut self, membership_id: i64) -> UserUserInfoCard {
    self.membership_id = Some(membership_id);
    self
  }

  pub fn membership_id(&self) -> Option<&i64> {
    self.membership_id.as_ref()
  }

  pub fn reset_membership_id(&mut self) {
    self.membership_id = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> UserUserInfoCard {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

}



