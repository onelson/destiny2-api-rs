/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyInventoryItemStatDefinition : Defines a specific stat value on an item, and the minimum/maximum range that we could compute for the item based on our heuristics for how the item might be generated.  Not guaranteed to match real-world instances of the item, but should hopefully at least be close. If it's not close, let us know on the Bungie API forums.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyInventoryItemStatDefinition {
  /// The hash for the DestinyStatDefinition representing this stat.
  #[serde(rename = "statHash")]
  stat_hash: Option<i32>,
  /// This value represents the stat value assuming the minimum possible roll but accounting for any mandatory bonuses that should be applied to the stat on item creation.  In Destiny 1, this was different from the \"minimum\" value because there were certain conditions where an item could be theoretically lower level/value than the initial roll.   In Destiny 2, this is not possible unless Talent Grids begin to be used again for these purposes or some other system change occurs... thus in practice, value and minimum should be the same in Destiny 2. Good riddance.
  #[serde(rename = "value")]
  value: Option<i32>,
  /// The minimum possible value for this stat that we think the item can roll.
  #[serde(rename = "minimum")]
  minimum: Option<i32>,
  /// The maximum possible value for this stat that we think the item can roll.
  #[serde(rename = "maximum")]
  maximum: Option<i32>
}

impl DestinyDefinitionsDestinyInventoryItemStatDefinition {
  /// Defines a specific stat value on an item, and the minimum/maximum range that we could compute for the item based on our heuristics for how the item might be generated.  Not guaranteed to match real-world instances of the item, but should hopefully at least be close. If it's not close, let us know on the Bungie API forums.
  pub fn new() -> DestinyDefinitionsDestinyInventoryItemStatDefinition {
    DestinyDefinitionsDestinyInventoryItemStatDefinition {
      stat_hash: None,
      value: None,
      minimum: None,
      maximum: None
    }
  }

  pub fn set_stat_hash(&mut self, stat_hash: i32) {
    self.stat_hash = Some(stat_hash);
  }

  pub fn with_stat_hash(mut self, stat_hash: i32) -> DestinyDefinitionsDestinyInventoryItemStatDefinition {
    self.stat_hash = Some(stat_hash);
    self
  }

  pub fn stat_hash(&self) -> Option<&i32> {
    self.stat_hash.as_ref()
  }

  pub fn reset_stat_hash(&mut self) {
    self.stat_hash = None;
  }

  pub fn set_value(&mut self, value: i32) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: i32) -> DestinyDefinitionsDestinyInventoryItemStatDefinition {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&i32> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

  pub fn set_minimum(&mut self, minimum: i32) {
    self.minimum = Some(minimum);
  }

  pub fn with_minimum(mut self, minimum: i32) -> DestinyDefinitionsDestinyInventoryItemStatDefinition {
    self.minimum = Some(minimum);
    self
  }

  pub fn minimum(&self) -> Option<&i32> {
    self.minimum.as_ref()
  }

  pub fn reset_minimum(&mut self) {
    self.minimum = None;
  }

  pub fn set_maximum(&mut self, maximum: i32) {
    self.maximum = Some(maximum);
  }

  pub fn with_maximum(mut self, maximum: i32) -> DestinyDefinitionsDestinyInventoryItemStatDefinition {
    self.maximum = Some(maximum);
    self
  }

  pub fn maximum(&self) -> Option<&i32> {
    self.maximum.as_ref()
  }

  pub fn reset_maximum(&mut self) {
    self.maximum = None;
  }

}



