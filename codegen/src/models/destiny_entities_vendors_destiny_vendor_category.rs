/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyEntitiesVendorsDestinyVendorCategory : Information about the category and items currently sold in that category.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyEntitiesVendorsDestinyVendorCategory {
  /// An index into the DestinyVendorDefinition.categories property, so you can grab the display data for this category.
  #[serde(rename = "categoryIndex")]
  category_index: Option<i32>,
  /// An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.
  #[serde(rename = "itemIndexes")]
  item_indexes: Option<Vec<i32>>
}

impl DestinyEntitiesVendorsDestinyVendorCategory {
  /// Information about the category and items currently sold in that category.
  pub fn new() -> DestinyEntitiesVendorsDestinyVendorCategory {
    DestinyEntitiesVendorsDestinyVendorCategory {
      category_index: None,
      item_indexes: None
    }
  }

  pub fn set_category_index(&mut self, category_index: i32) {
    self.category_index = Some(category_index);
  }

  pub fn with_category_index(mut self, category_index: i32) -> DestinyEntitiesVendorsDestinyVendorCategory {
    self.category_index = Some(category_index);
    self
  }

  pub fn category_index(&self) -> Option<&i32> {
    self.category_index.as_ref()
  }

  pub fn reset_category_index(&mut self) {
    self.category_index = None;
  }

  pub fn set_item_indexes(&mut self, item_indexes: Vec<i32>) {
    self.item_indexes = Some(item_indexes);
  }

  pub fn with_item_indexes(mut self, item_indexes: Vec<i32>) -> DestinyEntitiesVendorsDestinyVendorCategory {
    self.item_indexes = Some(item_indexes);
    self
  }

  pub fn item_indexes(&self) -> Option<&Vec<i32>> {
    self.item_indexes.as_ref()
  }

  pub fn reset_item_indexes(&mut self) {
    self.item_indexes = None;
  }

}



