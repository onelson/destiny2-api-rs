/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct TrendingApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> TrendingApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TrendingApiClient<C> {
        TrendingApiClient {
            configuration: configuration,
        }
    }
}

pub trait TrendingApi {
    fn trending_get_trending_categories(&self, ) -> Box<Future<Item = ::models::InlineResponse20052, Error = Error>>;
    fn trending_get_trending_category(&self, category_id: &str, page_number: i32) -> Box<Future<Item = ::models::InlineResponse20053, Error = Error>>;
    fn trending_get_trending_entry_detail(&self, identifier: &str, trending_entry_type: i32) -> Box<Future<Item = ::models::InlineResponse20054, Error = Error>>;
}


impl<C: hyper::client::Connect>TrendingApi for TrendingApiClient<C> {
    fn trending_get_trending_categories(&self, ) -> Box<Future<Item = ::models::InlineResponse20052, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/Trending/Categories/", configuration.base_path);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20052, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn trending_get_trending_category(&self, category_id: &str, page_number: i32) -> Box<Future<Item = ::models::InlineResponse20053, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/Trending/Categories/{categoryId}/{pageNumber}/", configuration.base_path, categoryId=category_id, pageNumber=page_number);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20053, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn trending_get_trending_entry_detail(&self, identifier: &str, trending_entry_type: i32) -> Box<Future<Item = ::models::InlineResponse20054, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let uri_str = format!("{}/Trending/Details/{trendingEntryType}/{identifier}/", configuration.base_path, identifier=identifier, trendingEntryType=trending_entry_type);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());



        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::InlineResponse20054, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

}
