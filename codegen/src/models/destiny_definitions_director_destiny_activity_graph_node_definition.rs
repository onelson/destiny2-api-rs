/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition : This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
  /// An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.
  #[serde(rename = "nodeId")]
  node_id: Option<i32>,
  /// The node *may* have display properties that override the active Activity's display properties.
  #[serde(rename = "overrideDisplay")]
  override_display: Option<Object>,
  /// The position on the map for this node.
  #[serde(rename = "position")]
  position: Option<Object>,
  /// The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.
  #[serde(rename = "featuringStates")]
  featuring_states: Option<Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition>>,
  /// The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.
  #[serde(rename = "activities")]
  activities: Option<Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition>>
}

impl DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
  /// This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)
  pub fn new() -> DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
    DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
      node_id: None,
      override_display: None,
      position: None,
      featuring_states: None,
      activities: None
    }
  }

  pub fn set_node_id(&mut self, node_id: i32) {
    self.node_id = Some(node_id);
  }

  pub fn with_node_id(mut self, node_id: i32) -> DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
    self.node_id = Some(node_id);
    self
  }

  pub fn node_id(&self) -> Option<&i32> {
    self.node_id.as_ref()
  }

  pub fn reset_node_id(&mut self) {
    self.node_id = None;
  }

  pub fn set_override_display(&mut self, override_display: Object) {
    self.override_display = Some(override_display);
  }

  pub fn with_override_display(mut self, override_display: Object) -> DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
    self.override_display = Some(override_display);
    self
  }

  pub fn override_display(&self) -> Option<&Object> {
    self.override_display.as_ref()
  }

  pub fn reset_override_display(&mut self) {
    self.override_display = None;
  }

  pub fn set_position(&mut self, position: Object) {
    self.position = Some(position);
  }

  pub fn with_position(mut self, position: Object) -> DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
    self.position = Some(position);
    self
  }

  pub fn position(&self) -> Option<&Object> {
    self.position.as_ref()
  }

  pub fn reset_position(&mut self) {
    self.position = None;
  }

  pub fn set_featuring_states(&mut self, featuring_states: Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition>) {
    self.featuring_states = Some(featuring_states);
  }

  pub fn with_featuring_states(mut self, featuring_states: Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition>) -> DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
    self.featuring_states = Some(featuring_states);
    self
  }

  pub fn featuring_states(&self) -> Option<&Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition>> {
    self.featuring_states.as_ref()
  }

  pub fn reset_featuring_states(&mut self) {
    self.featuring_states = None;
  }

  pub fn set_activities(&mut self, activities: Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition>) {
    self.activities = Some(activities);
  }

  pub fn with_activities(mut self, activities: Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition>) -> DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition {
    self.activities = Some(activities);
    self
  }

  pub fn activities(&self) -> Option<&Vec<::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition>> {
    self.activities.as_ref()
  }

  pub fn reset_activities(&mut self) {
    self.activities = None;
  }

}



