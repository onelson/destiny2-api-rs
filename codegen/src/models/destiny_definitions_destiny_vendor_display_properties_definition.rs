/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
  #[serde(rename = "largeIcon")]
  large_icon: Option<String>,
  #[serde(rename = "subtitle")]
  subtitle: Option<String>,
  /// Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.
  #[serde(rename = "requirementsDisplay")]
  requirements_display: Option<Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  /// Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.
  #[serde(rename = "icon")]
  icon: Option<String>,
  #[serde(rename = "hasIcon")]
  has_icon: Option<bool>
}

impl DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
  pub fn new() -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
      large_icon: None,
      subtitle: None,
      requirements_display: None,
      description: None,
      name: None,
      icon: None,
      has_icon: None
    }
  }

  pub fn set_large_icon(&mut self, large_icon: String) {
    self.large_icon = Some(large_icon);
  }

  pub fn with_large_icon(mut self, large_icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.large_icon = Some(large_icon);
    self
  }

  pub fn large_icon(&self) -> Option<&String> {
    self.large_icon.as_ref()
  }

  pub fn reset_large_icon(&mut self) {
    self.large_icon = None;
  }

  pub fn set_subtitle(&mut self, subtitle: String) {
    self.subtitle = Some(subtitle);
  }

  pub fn with_subtitle(mut self, subtitle: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.subtitle = Some(subtitle);
    self
  }

  pub fn subtitle(&self) -> Option<&String> {
    self.subtitle.as_ref()
  }

  pub fn reset_subtitle(&mut self) {
    self.subtitle = None;
  }

  pub fn set_requirements_display(&mut self, requirements_display: Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>) {
    self.requirements_display = Some(requirements_display);
  }

  pub fn with_requirements_display(mut self, requirements_display: Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.requirements_display = Some(requirements_display);
    self
  }

  pub fn requirements_display(&self) -> Option<&Vec<::models::DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition>> {
    self.requirements_display.as_ref()
  }

  pub fn reset_requirements_display(&mut self) {
    self.requirements_display = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_icon(&mut self, icon: String) {
    self.icon = Some(icon);
  }

  pub fn with_icon(mut self, icon: String) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.icon = Some(icon);
    self
  }

  pub fn icon(&self) -> Option<&String> {
    self.icon.as_ref()
  }

  pub fn reset_icon(&mut self) {
    self.icon = None;
  }

  pub fn set_has_icon(&mut self, has_icon: bool) {
    self.has_icon = Some(has_icon);
  }

  pub fn with_has_icon(mut self, has_icon: bool) -> DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition {
    self.has_icon = Some(has_icon);
    self
  }

  pub fn has_icon(&self) -> Option<&bool> {
    self.has_icon.as_ref()
  }

  pub fn reset_has_icon(&mut self) {
    self.has_icon = None;
  }

}



