/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition : Nodes can have different visual states. This object represents a single visual state (\"highlight type\") that a node can be in, and the unlock expression condition to determine whether it should be set.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition {
  /// The node can be highlighted in a variety of ways - the game iterates through these and finds the first FeaturingState that is valid at the present moment given the Game, Account, and Character state, and renders the node in that state. See the ActivityGraphNodeHighlightType enum for possible values.
  #[serde(rename = "highlightType")]
  highlight_type: Option<Object>
}

impl DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition {
  /// Nodes can have different visual states. This object represents a single visual state (\"highlight type\") that a node can be in, and the unlock expression condition to determine whether it should be set.
  pub fn new() -> DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition {
    DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition {
      highlight_type: None
    }
  }

  pub fn set_highlight_type(&mut self, highlight_type: Object) {
    self.highlight_type = Some(highlight_type);
  }

  pub fn with_highlight_type(mut self, highlight_type: Object) -> DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition {
    self.highlight_type = Some(highlight_type);
    self
  }

  pub fn highlight_type(&self) -> Option<&Object> {
    self.highlight_type.as_ref()
  }

  pub fn reset_highlight_type(&mut self) {
    self.highlight_type = None;
  }

}



