/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyMilestonesDestinyMilestoneActivityVariant : Represents custom data that we know about an individual variant of an activity.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyMilestoneActivityVariant {
  /// The hash for the specific variant of the activity related to this milestone. You can pull more detailed static info from the DestinyActivityDefinition, such as difficulty level.
  #[serde(rename = "activityHash")]
  activity_hash: Option<i32>,
  /// An OPTIONAL component: if it makes sense to talk about this activity variant in terms of whether or not it has been completed or what progress you have made in it, this will be returned. Otherwise, this will be NULL.
  #[serde(rename = "completionStatus")]
  completion_status: Option<Object>
}

impl DestinyMilestonesDestinyMilestoneActivityVariant {
  /// Represents custom data that we know about an individual variant of an activity.
  pub fn new() -> DestinyMilestonesDestinyMilestoneActivityVariant {
    DestinyMilestonesDestinyMilestoneActivityVariant {
      activity_hash: None,
      completion_status: None
    }
  }

  pub fn set_activity_hash(&mut self, activity_hash: i32) {
    self.activity_hash = Some(activity_hash);
  }

  pub fn with_activity_hash(mut self, activity_hash: i32) -> DestinyMilestonesDestinyMilestoneActivityVariant {
    self.activity_hash = Some(activity_hash);
    self
  }

  pub fn activity_hash(&self) -> Option<&i32> {
    self.activity_hash.as_ref()
  }

  pub fn reset_activity_hash(&mut self) {
    self.activity_hash = None;
  }

  pub fn set_completion_status(&mut self, completion_status: Object) {
    self.completion_status = Some(completion_status);
  }

  pub fn with_completion_status(mut self, completion_status: Object) -> DestinyMilestonesDestinyMilestoneActivityVariant {
    self.completion_status = Some(completion_status);
    self
  }

  pub fn completion_status(&self) -> Option<&Object> {
    self.completion_status.as_ref()
  }

  pub fn reset_completion_status(&mut self) {
    self.completion_status = None;
  }

}



