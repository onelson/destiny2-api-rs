/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyComponentsItemsDestinyItemPlugComponent : Plugs are non-instanced items that can provide Stat and Perk benefits when socketed into an instanced item. Items have Sockets, and Plugs are inserted into Sockets.  This component finds all items that are considered \"Plugs\" in your inventory, and return information about the plug aside from any specific Socket into which it could be inserted.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyComponentsItemsDestinyItemPlugComponent {
  /// If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.
  #[serde(rename = "insertFailIndexes")]
  insert_fail_indexes: Option<Vec<i32>>,
  /// If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.
  #[serde(rename = "enableFailIndexes")]
  enable_fail_indexes: Option<Vec<i32>>
}

impl DestinyComponentsItemsDestinyItemPlugComponent {
  /// Plugs are non-instanced items that can provide Stat and Perk benefits when socketed into an instanced item. Items have Sockets, and Plugs are inserted into Sockets.  This component finds all items that are considered \"Plugs\" in your inventory, and return information about the plug aside from any specific Socket into which it could be inserted.
  pub fn new() -> DestinyComponentsItemsDestinyItemPlugComponent {
    DestinyComponentsItemsDestinyItemPlugComponent {
      insert_fail_indexes: None,
      enable_fail_indexes: None
    }
  }

  pub fn set_insert_fail_indexes(&mut self, insert_fail_indexes: Vec<i32>) {
    self.insert_fail_indexes = Some(insert_fail_indexes);
  }

  pub fn with_insert_fail_indexes(mut self, insert_fail_indexes: Vec<i32>) -> DestinyComponentsItemsDestinyItemPlugComponent {
    self.insert_fail_indexes = Some(insert_fail_indexes);
    self
  }

  pub fn insert_fail_indexes(&self) -> Option<&Vec<i32>> {
    self.insert_fail_indexes.as_ref()
  }

  pub fn reset_insert_fail_indexes(&mut self) {
    self.insert_fail_indexes = None;
  }

  pub fn set_enable_fail_indexes(&mut self, enable_fail_indexes: Vec<i32>) {
    self.enable_fail_indexes = Some(enable_fail_indexes);
  }

  pub fn with_enable_fail_indexes(mut self, enable_fail_indexes: Vec<i32>) -> DestinyComponentsItemsDestinyItemPlugComponent {
    self.enable_fail_indexes = Some(enable_fail_indexes);
    self
  }

  pub fn enable_fail_indexes(&self) -> Option<&Vec<i32>> {
    self.enable_fail_indexes.as_ref()
  }

  pub fn reset_enable_fail_indexes(&mut self) {
    self.enable_fail_indexes = None;
  }

}



