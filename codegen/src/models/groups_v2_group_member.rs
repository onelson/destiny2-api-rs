/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[derive(Debug, Serialize, Deserialize)]
pub struct GroupsV2GroupMember {
  #[serde(rename = "memberType")]
  member_type: Option<::models::GroupsV2RuntimeGroupMemberType>,
  #[serde(rename = "isOnline")]
  is_online: Option<bool>,
  #[serde(rename = "groupId")]
  group_id: Option<i64>,
  #[serde(rename = "destinyUserInfo")]
  destiny_user_info: Option<::models::UserUserInfoCard>,
  #[serde(rename = "bungieNetUserInfo")]
  bungie_net_user_info: Option<::models::UserUserInfoCard>,
  #[serde(rename = "joinDate")]
  join_date: Option<String>
}

impl GroupsV2GroupMember {
  pub fn new() -> GroupsV2GroupMember {
    GroupsV2GroupMember {
      member_type: None,
      is_online: None,
      group_id: None,
      destiny_user_info: None,
      bungie_net_user_info: None,
      join_date: None
    }
  }

  pub fn set_member_type(&mut self, member_type: ::models::GroupsV2RuntimeGroupMemberType) {
    self.member_type = Some(member_type);
  }

  pub fn with_member_type(mut self, member_type: ::models::GroupsV2RuntimeGroupMemberType) -> GroupsV2GroupMember {
    self.member_type = Some(member_type);
    self
  }

  pub fn member_type(&self) -> Option<&::models::GroupsV2RuntimeGroupMemberType> {
    self.member_type.as_ref()
  }

  pub fn reset_member_type(&mut self) {
    self.member_type = None;
  }

  pub fn set_is_online(&mut self, is_online: bool) {
    self.is_online = Some(is_online);
  }

  pub fn with_is_online(mut self, is_online: bool) -> GroupsV2GroupMember {
    self.is_online = Some(is_online);
    self
  }

  pub fn is_online(&self) -> Option<&bool> {
    self.is_online.as_ref()
  }

  pub fn reset_is_online(&mut self) {
    self.is_online = None;
  }

  pub fn set_group_id(&mut self, group_id: i64) {
    self.group_id = Some(group_id);
  }

  pub fn with_group_id(mut self, group_id: i64) -> GroupsV2GroupMember {
    self.group_id = Some(group_id);
    self
  }

  pub fn group_id(&self) -> Option<&i64> {
    self.group_id.as_ref()
  }

  pub fn reset_group_id(&mut self) {
    self.group_id = None;
  }

  pub fn set_destiny_user_info(&mut self, destiny_user_info: ::models::UserUserInfoCard) {
    self.destiny_user_info = Some(destiny_user_info);
  }

  pub fn with_destiny_user_info(mut self, destiny_user_info: ::models::UserUserInfoCard) -> GroupsV2GroupMember {
    self.destiny_user_info = Some(destiny_user_info);
    self
  }

  pub fn destiny_user_info(&self) -> Option<&::models::UserUserInfoCard> {
    self.destiny_user_info.as_ref()
  }

  pub fn reset_destiny_user_info(&mut self) {
    self.destiny_user_info = None;
  }

  pub fn set_bungie_net_user_info(&mut self, bungie_net_user_info: ::models::UserUserInfoCard) {
    self.bungie_net_user_info = Some(bungie_net_user_info);
  }

  pub fn with_bungie_net_user_info(mut self, bungie_net_user_info: ::models::UserUserInfoCard) -> GroupsV2GroupMember {
    self.bungie_net_user_info = Some(bungie_net_user_info);
    self
  }

  pub fn bungie_net_user_info(&self) -> Option<&::models::UserUserInfoCard> {
    self.bungie_net_user_info.as_ref()
  }

  pub fn reset_bungie_net_user_info(&mut self) {
    self.bungie_net_user_info = None;
  }

  pub fn set_join_date(&mut self, join_date: String) {
    self.join_date = Some(join_date);
  }

  pub fn with_join_date(mut self, join_date: String) -> GroupsV2GroupMember {
    self.join_date = Some(join_date);
    self
  }

  pub fn join_date(&self) -> Option<&String> {
    self.join_date.as_ref()
  }

  pub fn reset_join_date(&mut self) {
    self.join_date = None;
  }

}



