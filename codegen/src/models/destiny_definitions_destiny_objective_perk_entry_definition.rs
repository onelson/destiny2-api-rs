/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyObjectivePerkEntryDefinition : Defines the conditions under which an intrinsic perk is applied while participating in an Objective.  These perks will generally not be benefit-granting perks, but rather a perk that modifies gameplay in some interesting way.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyObjectivePerkEntryDefinition {
  /// The hash identifier of the DestinySandboxPerkDefinition that will be applied to the character.
  #[serde(rename = "perkHash")]
  perk_hash: Option<i32>,
  /// An enumeration indicating whether it will be applied as long as the Objective is active, when it's completed, or until it's completed.
  #[serde(rename = "style")]
  style: Option<Object>
}

impl DestinyDefinitionsDestinyObjectivePerkEntryDefinition {
  /// Defines the conditions under which an intrinsic perk is applied while participating in an Objective.  These perks will generally not be benefit-granting perks, but rather a perk that modifies gameplay in some interesting way.
  pub fn new() -> DestinyDefinitionsDestinyObjectivePerkEntryDefinition {
    DestinyDefinitionsDestinyObjectivePerkEntryDefinition {
      perk_hash: None,
      style: None
    }
  }

  pub fn set_perk_hash(&mut self, perk_hash: i32) {
    self.perk_hash = Some(perk_hash);
  }

  pub fn with_perk_hash(mut self, perk_hash: i32) -> DestinyDefinitionsDestinyObjectivePerkEntryDefinition {
    self.perk_hash = Some(perk_hash);
    self
  }

  pub fn perk_hash(&self) -> Option<&i32> {
    self.perk_hash.as_ref()
  }

  pub fn reset_perk_hash(&mut self) {
    self.perk_hash = None;
  }

  pub fn set_style(&mut self, style: Object) {
    self.style = Some(style);
  }

  pub fn with_style(mut self, style: Object) -> DestinyDefinitionsDestinyObjectivePerkEntryDefinition {
    self.style = Some(style);
    self
  }

  pub fn style(&self) -> Option<&Object> {
    self.style.as_ref()
  }

  pub fn reset_style(&mut self) {
    self.style = None;
  }

}



