/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[derive(Debug, Serialize, Deserialize)]
pub struct UserAckState {
  /// Indicates the related item has not been acknowledged.
  #[serde(rename = "needsAck")]
  needs_ack: Option<bool>,
  /// Identifier to use when acknowledging the related item. [category]:[entityId]:[targetId]
  #[serde(rename = "ackId")]
  ack_id: Option<String>
}

impl UserAckState {
  pub fn new() -> UserAckState {
    UserAckState {
      needs_ack: None,
      ack_id: None
    }
  }

  pub fn set_needs_ack(&mut self, needs_ack: bool) {
    self.needs_ack = Some(needs_ack);
  }

  pub fn with_needs_ack(mut self, needs_ack: bool) -> UserAckState {
    self.needs_ack = Some(needs_ack);
    self
  }

  pub fn needs_ack(&self) -> Option<&bool> {
    self.needs_ack.as_ref()
  }

  pub fn reset_needs_ack(&mut self) {
    self.needs_ack = None;
  }

  pub fn set_ack_id(&mut self, ack_id: String) {
    self.ack_id = Some(ack_id);
  }

  pub fn with_ack_id(mut self, ack_id: String) -> UserAckState {
    self.ack_id = Some(ack_id);
    self
  }

  pub fn ack_id(&self) -> Option<&String> {
    self.ack_id.as_ref()
  }

  pub fn reset_ack_id(&mut self) {
    self.ack_id = None;
  }

}



