/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyDefinitionsDestinyItemSourceBlockDefinition : Data about an item's \"sources\": ways that the item can be obtained.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyDefinitionsDestinyItemSourceBlockDefinition {
  /// The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).
  #[serde(rename = "sourceHashes")]
  source_hashes: Option<Vec<i32>>,
  /// A collection of details about the stats that were computed for the ways we found that the item could be spawned.
  #[serde(rename = "sources")]
  sources: Option<Vec<::models::DestinyDefinitionsSourcesDestinyItemSourceDefinition>>,
  /// If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.
  #[serde(rename = "exclusive")]
  exclusive: Option<Object>
}

impl DestinyDefinitionsDestinyItemSourceBlockDefinition {
  /// Data about an item's \"sources\": ways that the item can be obtained.
  pub fn new() -> DestinyDefinitionsDestinyItemSourceBlockDefinition {
    DestinyDefinitionsDestinyItemSourceBlockDefinition {
      source_hashes: None,
      sources: None,
      exclusive: None
    }
  }

  pub fn set_source_hashes(&mut self, source_hashes: Vec<i32>) {
    self.source_hashes = Some(source_hashes);
  }

  pub fn with_source_hashes(mut self, source_hashes: Vec<i32>) -> DestinyDefinitionsDestinyItemSourceBlockDefinition {
    self.source_hashes = Some(source_hashes);
    self
  }

  pub fn source_hashes(&self) -> Option<&Vec<i32>> {
    self.source_hashes.as_ref()
  }

  pub fn reset_source_hashes(&mut self) {
    self.source_hashes = None;
  }

  pub fn set_sources(&mut self, sources: Vec<::models::DestinyDefinitionsSourcesDestinyItemSourceDefinition>) {
    self.sources = Some(sources);
  }

  pub fn with_sources(mut self, sources: Vec<::models::DestinyDefinitionsSourcesDestinyItemSourceDefinition>) -> DestinyDefinitionsDestinyItemSourceBlockDefinition {
    self.sources = Some(sources);
    self
  }

  pub fn sources(&self) -> Option<&Vec<::models::DestinyDefinitionsSourcesDestinyItemSourceDefinition>> {
    self.sources.as_ref()
  }

  pub fn reset_sources(&mut self) {
    self.sources = None;
  }

  pub fn set_exclusive(&mut self, exclusive: Object) {
    self.exclusive = Some(exclusive);
  }

  pub fn with_exclusive(mut self, exclusive: Object) -> DestinyDefinitionsDestinyItemSourceBlockDefinition {
    self.exclusive = Some(exclusive);
    self
  }

  pub fn exclusive(&self) -> Option<&Object> {
    self.exclusive.as_ref()
  }

  pub fn reset_exclusive(&mut self) {
    self.exclusive = None;
  }

}



