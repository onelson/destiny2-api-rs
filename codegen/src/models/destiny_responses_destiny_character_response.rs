/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinyResponsesDestinyCharacterResponse : The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinyResponsesDestinyCharacterResponse {
  /// The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories
  #[serde(rename = "inventory")]
  inventory: Option<Object>,
  /// Base information about the character in question.  COMPONENT TYPE: Characters
  #[serde(rename = "character")]
  character: Option<Object>,
  /// Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions
  #[serde(rename = "progressions")]
  progressions: Option<Object>,
  /// Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData
  #[serde(rename = "renderData")]
  render_data: Option<Object>,
  /// Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities
  #[serde(rename = "activities")]
  activities: Option<Object>,
  /// Equipped items on the character.  COMPONENT TYPE: CharacterEquipment
  #[serde(rename = "equipment")]
  equipment: Option<Object>,
  /// Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks
  #[serde(rename = "kiosks")]
  kiosks: Option<Object>,
  /// The set of components belonging to the player's instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
  #[serde(rename = "itemComponents")]
  item_components: Option<Object>
}

impl DestinyResponsesDestinyCharacterResponse {
  /// The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
  pub fn new() -> DestinyResponsesDestinyCharacterResponse {
    DestinyResponsesDestinyCharacterResponse {
      inventory: None,
      character: None,
      progressions: None,
      render_data: None,
      activities: None,
      equipment: None,
      kiosks: None,
      item_components: None
    }
  }

  pub fn set_inventory(&mut self, inventory: Object) {
    self.inventory = Some(inventory);
  }

  pub fn with_inventory(mut self, inventory: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.inventory = Some(inventory);
    self
  }

  pub fn inventory(&self) -> Option<&Object> {
    self.inventory.as_ref()
  }

  pub fn reset_inventory(&mut self) {
    self.inventory = None;
  }

  pub fn set_character(&mut self, character: Object) {
    self.character = Some(character);
  }

  pub fn with_character(mut self, character: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.character = Some(character);
    self
  }

  pub fn character(&self) -> Option<&Object> {
    self.character.as_ref()
  }

  pub fn reset_character(&mut self) {
    self.character = None;
  }

  pub fn set_progressions(&mut self, progressions: Object) {
    self.progressions = Some(progressions);
  }

  pub fn with_progressions(mut self, progressions: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.progressions = Some(progressions);
    self
  }

  pub fn progressions(&self) -> Option<&Object> {
    self.progressions.as_ref()
  }

  pub fn reset_progressions(&mut self) {
    self.progressions = None;
  }

  pub fn set_render_data(&mut self, render_data: Object) {
    self.render_data = Some(render_data);
  }

  pub fn with_render_data(mut self, render_data: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.render_data = Some(render_data);
    self
  }

  pub fn render_data(&self) -> Option<&Object> {
    self.render_data.as_ref()
  }

  pub fn reset_render_data(&mut self) {
    self.render_data = None;
  }

  pub fn set_activities(&mut self, activities: Object) {
    self.activities = Some(activities);
  }

  pub fn with_activities(mut self, activities: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.activities = Some(activities);
    self
  }

  pub fn activities(&self) -> Option<&Object> {
    self.activities.as_ref()
  }

  pub fn reset_activities(&mut self) {
    self.activities = None;
  }

  pub fn set_equipment(&mut self, equipment: Object) {
    self.equipment = Some(equipment);
  }

  pub fn with_equipment(mut self, equipment: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.equipment = Some(equipment);
    self
  }

  pub fn equipment(&self) -> Option<&Object> {
    self.equipment.as_ref()
  }

  pub fn reset_equipment(&mut self) {
    self.equipment = None;
  }

  pub fn set_kiosks(&mut self, kiosks: Object) {
    self.kiosks = Some(kiosks);
  }

  pub fn with_kiosks(mut self, kiosks: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.kiosks = Some(kiosks);
    self
  }

  pub fn kiosks(&self) -> Option<&Object> {
    self.kiosks.as_ref()
  }

  pub fn reset_kiosks(&mut self) {
    self.kiosks = None;
  }

  pub fn set_item_components(&mut self, item_components: Object) {
    self.item_components = Some(item_components);
  }

  pub fn with_item_components(mut self, item_components: Object) -> DestinyResponsesDestinyCharacterResponse {
    self.item_components = Some(item_components);
    self
  }

  pub fn item_components(&self) -> Option<&Object> {
    self.item_components.as_ref()
  }

  pub fn reset_item_components(&mut self) {
    self.item_components = None;
  }

}



